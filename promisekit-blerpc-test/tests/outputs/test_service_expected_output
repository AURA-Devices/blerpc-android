import Foundation
import RxBluetoothKit
import CoreBluetooth
import RxSwift
import PromiseKit

/// Extension to support TestService service
public extension BleWorker {

    /// UUID of service
    static let TestServiceUUID: String = "A0000000-0000-0000-0000-000000000000"

    /// Send read request of method readValue on device
    /// - parameter request: Device_GetValueRequest
    /// - returns: Device_GetValueResponse if success
    /// - warning: rejects when there is error in sending data
    public func readValue(request: Device_GetValueRequest) -> Promise<Device_GetValueResponse> {
        return Promise { seal in
            _ = self.discoverCharacteristic(serviceUUID: "A0000000-0000-0000-0000-000000000000", characteristicUUID: "A0000001-0000-0000-0000-000000000000").map { characteristic in
                _ = characteristic.readValue().subscribe(onSuccess: { (characteristic) in
                    guard let data = characteristic.value else {
                        seal.reject(wrongDataError)
                        return
                    }
                    let proto = Device_GetValueResponse.decode(data: data)
                    seal.fulfill(proto)
                }, onError: { (error) in
                    seal.reject(error)
                })
            }
        }
    }




    /// Send write request of method writeValue on device
    /// - parameter request: Device_SetValueRequest
    /// - returns: *Void* if success
    /// - warning: rejects when there is error in sending data
    public func writeValue(request: Device_SetValueRequest) -> Promise<Void> {
        return Promise { seal in
            let data = Device_SetValueRequest.encode(proto: request)
            _ = self.discoverCharacteristic(serviceUUID: "A0000000-0000-0000-0000-000000000000", characteristicUUID: "A0000001-0000-0000-0000-000000000000").map { characteristic in
                _ = characteristic.writeValue(data, type: .withResponse).subscribe { event in
                    switch event {
                    case .success:
                        seal.fulfill(())
                    case .error(let error):
                        seal.reject(error)
                    }
                }
            }
        }
    }




    /// Send subscribe request of method getValueUpdates on device
    /// - parameter complition: closure which calls when new data appears
    /// - parameter error: closure which calls when error occurs
    public func getValueUpdates(complition: @escaping (Device_GetValueResponse) -> Void, error: @escaping (Error) -> Void) {
        _ = self.discoverCharacteristic(serviceUUID: "A0000000-0000-0000-0000-000000000000", characteristicUUID: "A0000001-0000-0000-0000-000000000000").map { characteristic in
            let disposable = characteristic.observeValueUpdateAndSetNotification().subscribe({ (event) in
                switch event {
                    case .completed:
                    break
                case .error(let err):
                    error(err)
                case .next(let characteristic):
                    guard let data = characteristic.value else {
                        error(wrongDataError)
                        return
                    }
                    let proto = Device_GetValueResponse.decode(data: data)
                    complition(proto)
                }
            })

            self.disposableBag["\("A0000000-0000-0000-0000-000000000000") - \("A0000001-0000-0000-0000-000000000000")"] = disposable
        }
    }

    /// Unsubscribe from receiving getValueUpdates updates
    public func unsubscribeGetValueUpdates() {
        self.disconnectFrom(serviceUUID: "A0000000-0000-0000-0000-000000000000", characteristicUUID: "A0000001-0000-0000-0000-000000000000")
    }

}
