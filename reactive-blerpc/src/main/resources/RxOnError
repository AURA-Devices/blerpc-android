package com.blerpc.reactive;

/**
 * Tools to mute and log throwing {@link io.reactivex.exceptions.UndeliverableException}, that will
 * be thrown on {@link io.reactivex.Emitter#onError(Throwable)} method like UncatchableException if
 * there is no active subscription. Do {@link #loggingUncatchableExceptions(io.reactivex.Emitter,
 * Throwable, java.util.logging.Logger)} for safe calling {@link
 * io.reactivex.Emitter#onError(Throwable)} method, mute and log UncatchableException. This class
 * should not be used extensively, only in select situations where this is absolutely needed.
 */
public class RxOnError {

  private RxOnError() {}

  /**
   * Send error to RxJava Observable subscriber, mute and log occurred RxJava uncaught undeliverable
   * exceptions.
   *
   * @param subscriber - RxJava Observable subscriber for sending an error.
   * @param throwable - error that will be sent to subscriber.
   * @param logger - for logging errors.
   */
  public static void loggingUncatchableExceptions(
      io.reactivex.Emitter subscriber, Throwable throwable, java.util.logging.Logger logger) {
    loggingUncatchableExceptions(() -> subscriber.onError(throwable), logger);
  }

  /**
   * Send error to RxJava Single subscriber, mute and log occurred RxJava uncaught undeliverable
   * exceptions.
   *
   * @param subscriber - RxJava Single subscriber for sending an error.
   * @param throwable - error that will be sent to subscriber.
   * @param logger - for logging errors.
   */
  public static void loggingUncatchableExceptions(
      io.reactivex.SingleEmitter subscriber, Throwable throwable, java.util.logging.Logger logger) {
    loggingUncatchableExceptions(() -> subscriber.onError(throwable), logger);
  }

  private static void loggingUncatchableExceptions(
      Runnable runnable, java.util.logging.Logger logger) {
    io.reactivex.functions.Consumer<? super Throwable> previousErrorHandler =
        io.reactivex.plugins.RxJavaPlugins.getErrorHandler();
    io.reactivex.plugins.RxJavaPlugins.setErrorHandler(
        error -> muteUndeliverableException(error, logger));
    runnable.run();
    io.reactivex.plugins.RxJavaPlugins.setErrorHandler(previousErrorHandler);
  }

  /**
   * Don't throw undeliverable exception and throw others.
   *
   * @param error - exception that will be thrown if it isn't instance of {@link
   *     io.reactivex.exceptions.UndeliverableException}.
   * @param logger - for logging {@link io.reactivex.exceptions.UndeliverableException} message.
   */
  private static void muteUndeliverableException(Throwable error, java.util.logging.Logger logger) {
    if (error instanceof io.reactivex.exceptions.UndeliverableException) {
      logger.info(error.getMessage());
      return;
    } else if (error instanceof RuntimeException) {
      throw (RuntimeException) error;
    }
    throw new RuntimeException(error);
  }
}
