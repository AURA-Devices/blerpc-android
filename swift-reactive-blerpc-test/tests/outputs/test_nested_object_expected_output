import Foundation

extension My_Device_GetValueResponse {

    /// Convert data to My_Device_GetValueResponse proto object
    /// - parameter data: data which needs to be converted
    /// - returns: decoded proto object
    static func decode(data: Data) throws -> My_Device_GetValueResponse {
        do {
            var proto = My_Device_GetValueResponse()
            proto.intValue = try ProtoDecoder.decode(data: data, from: 0, to: 4, type: ProtoType.init(rawValue: "TYPE_INT32")) as! TYPE_INT32
            proto.nestedValueID = try My_Device_NestedMessage.decode(data: data.subdata(in: Range.init(NSRange.init(location: 4, length: 8 - 4))!))
            return proto
        } catch {
            throw error
        }
    }

    /// Convert My_Device_GetValueResponse proto object to raw data
    /// - parameter proto: proto object which needs to be converted
    /// - returns: encoded data
    static func encode(proto: My_Device_GetValueResponse) throws -> Data {
        do {
            var data = Data()
            data.append(try ProtoEncoder.encode(object: proto.intValue, from: 0, to: 4, type: ProtoType.init(rawValue: "TYPE_INT32")))
            data.append(try My_Device_NestedMessage.encode(proto: proto.nestedValueID))
return data
        } catch {
            throw error
        }
    }

}
