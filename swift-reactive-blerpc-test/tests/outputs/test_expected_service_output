import CoreBluetooth
import Foundation
import RxBluetoothKit
import RxSwift

/// TestService service.
public class TestService: BleRpcService {
    /// UUID of service.
    public static let TestServiceUUID: String = "A0000000-0000-0000-0000-000000000000"

    /// Send read request of method readValue on device.
    /// - parameter request: Device_GetValueRequest.
    /// - returns: *Single* that emit either a single element of Device_GetValueResponse or an error.
    public func readValue(request: Device_GetValueRequest) -> Single<Device_GetValueResponse> {
        do {
            let data = try Device_GetValueRequest.bleRpcEncode(proto: request)

            return try bleServiceDriver.read(
                request: data,
                serviceUUID: TestService.TestServiceUUID,
                characteristicUUID: "A0000001-0000-0000-0000-000000000000")
            .map { response in
                try Device_GetValueResponse.bleRpcDecode(data: response)
            }
        } catch {
            return Single.error(error)
        }
    }

    /// Send write request of method writeValue on device.
    /// - parameter request: Device_SetValueRequest.
    /// - returns: *Single* that emit either a single element of Device_SetValueResponse or an error.
    public func writeValue(request: Device_SetValueRequest) -> Single<Device_SetValueResponse> {
        do {
            let data = try Device_SetValueRequest.bleRpcEncode(proto: request)

            return bleServiceDriver.write(
                request: data,
                serviceUUID: TestService.TestServiceUUID,
                characteristicUUID: "A0000001-0000-0000-0000-000000000000")
            .map { response in
                try Device_SetValueResponse.bleRpcDecode(data: response)
            }
        } catch {
            return Single.error(error)
        }
    }

    /// Send subscribe request of method getValueUpdates on device.
    /// - parameter request: Device_GetValueRequest.
    /// - returns: *Observable* with an infinite sequence of Device_GetValueResponse-s.
    public func getValueUpdates(request: Device_GetValueRequest) -> Observable<Device_GetValueResponse> {
        do {
            let data = try Device_GetValueRequest.bleRpcEncode(proto: request)

            return try bleServiceDriver.subscribe(
                request: data,
                serviceUUID: TestService.TestServiceUUID,
                characteristicUUID: "A0000001-0000-0000-0000-000000000000")
            .map { response in
                try Device_GetValueResponse.bleRpcDecode(data: response)
            }
        } catch {
            return Observable.error(error)
        }
    }
}
