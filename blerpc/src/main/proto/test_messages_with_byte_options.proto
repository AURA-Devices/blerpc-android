syntax = "proto3";

option java_multiple_files = true;
option optimize_for = CODE_SIZE;
option java_generic_services = true;

package com.blerpc.device.test.proto;

import "blerpc.proto";

message TestOptionsImage {
    option (com.blerpc.message_size) = {
        message_size_bytes: 28
    };

    int32 version = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 1
    }];
    int32 crc = 2 [(com.blerpc.filed_bytes) = {
        from_byte: 1
        to_byte: 3
    }];
    int32 length = 3 [(com.blerpc.filed_bytes) = {
        from_byte: 3
        to_byte: 7
    }];
    bool release = 4 [(com.blerpc.filed_bytes) = {
        from_byte: 7
        to_byte: 8
    }];
    TestType type = 5 [(com.blerpc.filed_bytes) = {
        from_byte: 8
        to_byte: 9
    }];

    TestMetadata metadata = 6 [(com.blerpc.filed_bytes) = {
        from_byte: 10
        to_byte: 20
    }];
    int64 buildTime = 7 [(com.blerpc.filed_bytes) = {
        from_byte: 20
        to_byte: 28
    }];
}

message TestOptionsImageRequest {}

message TestOptionsZeroBytesRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 0
    };
    int32 value = 1;
}

enum TestType {
    UNKNOWN = 0;
    ONLY_APP = 1;
    FULL = 2;
}

message TestMetadata {
    option (com.blerpc.message_size) = {
        message_size_bytes: 10
    };

    int32 ble_metadata = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 4
    }];

    TestToken token = 2 [(com.blerpc.filed_bytes) = {
        from_byte: 5
        to_byte: 9
    }];
}

message TestToken {
    option (com.blerpc.message_size) = {
        message_size_bytes: 4
    };

    int32 token = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 4
    }];
}

message TestOptionsWithFieldNoBytesRequest {
    int32 value = 1;
}

message TestOptionsNoBytesRangeRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 2
    };
    int32 value = 1;
}

message TestOptionsEqualsIndexesRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 10
    };

    int32 metadata = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 0
    }];
}

message TestOptionsNegativeRangeRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 10
    };

    int32 metadata = 1 [(com.blerpc.filed_bytes) = {
        from_byte: -1
        to_byte: 0
    }];
}

message TestOptionsRangeBiggerThanCountRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 10
    };

    int32 metadata = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 7
        to_byte: 11
    }];
}

message TestOptionsRangeIntersectRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 10
    };

    int32 value = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 4
    }];

    int32 metadata = 2 [(com.blerpc.filed_bytes) = {
        from_byte: 2
        to_byte: 6
    }];
}

message TestOptionsStringValueRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 4
    };

    string message = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 4
    }];
}

message TestOptionsFloatValueRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 4
    };

    float weight = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 4
    }];
}

message TestOptionsDoubleValueRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 4
    };

    double impedance = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 4
    }];
}

message TestOptionsWrongIntegerRangeRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 11
    };

    int32 value = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 11
    }];
}

message TestOptionsWrongLongRangeRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 13
    };

    int64 value = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 13
    }];
}

message TestOptionsWrongEnumRangeRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 9
    };

    TestType type = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 9
    }];
}

message TestOptionsWrongBooleanRangeRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 2
    };

    bool release = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 2
    }];
}

message TestOptionsSmallEnumRangeRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 1
    };

    TestTwoBytesSizeEnum big_enum = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 1
    }];
}

enum TestTwoBytesSizeEnum {
    UNKNOWN_VALUE = 0;
    VALUE_1 = 1;
    VALUE_2 = 2;
    VALUE_3 = 3;
    VALUE_4 = 4;
    VALUE_5 = 5;
    VALUE_6 = 6;
    VALUE_7 = 7;
    VALUE_8 = 8;
    VALUE_9 = 9;
    VALUE_10 = 10;
    VALUE_11 = 11;
    VALUE_12 = 12;
    VALUE_13 = 13;
    VALUE_14 = 14;
    VALUE_15 = 15;
    VALUE_16 = 16;
    VALUE_17 = 17;
    VALUE_18 = 18;
    VALUE_19 = 19;
    VALUE_20 = 20;
    VALUE_21 = 21;
    VALUE_22 = 22;
    VALUE_23 = 23;
    VALUE_24 = 24;
    VALUE_25 = 25;
    VALUE_26 = 26;
    VALUE_27 = 27;
    VALUE_28 = 28;
    VALUE_29 = 29;
    VALUE_30 = 30;
    VALUE_31 = 31;
    VALUE_32 = 32;
    VALUE_33 = 33;
    VALUE_34 = 34;
    VALUE_35 = 35;
    VALUE_36 = 36;
    VALUE_37 = 37;
    VALUE_38 = 38;
    VALUE_39 = 39;
    VALUE_40 = 40;
    VALUE_41 = 41;
    VALUE_42 = 42;
    VALUE_43 = 43;
    VALUE_44 = 44;
    VALUE_45 = 45;
    VALUE_46 = 46;
    VALUE_47 = 47;
    VALUE_48 = 48;
    VALUE_49 = 49;
    VALUE_50 = 50;
    VALUE_51 = 51;
    VALUE_52 = 52;
    VALUE_53 = 53;
    VALUE_54 = 54;
    VALUE_55 = 55;
    VALUE_56 = 56;
    VALUE_57 = 57;
    VALUE_58 = 58;
    VALUE_59 = 59;
    VALUE_60 = 60;
    VALUE_61 = 61;
    VALUE_62 = 62;
    VALUE_63 = 63;
    VALUE_64 = 64;
    VALUE_65 = 65;
    VALUE_66 = 66;
    VALUE_67 = 67;
    VALUE_68 = 68;
    VALUE_69 = 69;
    VALUE_70 = 70;
    VALUE_71 = 71;
    VALUE_72 = 72;
    VALUE_73 = 73;
    VALUE_74 = 74;
    VALUE_75 = 75;
    VALUE_76 = 76;
    VALUE_77 = 77;
    VALUE_78 = 78;
    VALUE_79 = 79;
    VALUE_80 = 80;
    VALUE_81 = 81;
    VALUE_82 = 82;
    VALUE_83 = 83;
    VALUE_84 = 84;
    VALUE_85 = 85;
    VALUE_86 = 86;
    VALUE_87 = 87;
    VALUE_88 = 88;
    VALUE_89 = 89;
    VALUE_90 = 90;
    VALUE_91 = 91;
    VALUE_92 = 92;
    VALUE_93 = 93;
    VALUE_94 = 94;
    VALUE_95 = 95;
    VALUE_96 = 96;
    VALUE_97 = 97;
    VALUE_98 = 98;
    VALUE_99 = 99;
    VALUE_100 = 100;
    VALUE_101 = 101;
    VALUE_102 = 102;
    VALUE_103 = 103;
    VALUE_104 = 104;
    VALUE_105 = 105;
    VALUE_106 = 106;
    VALUE_107 = 107;
    VALUE_108 = 108;
    VALUE_109 = 109;
    VALUE_110 = 110;
    VALUE_111 = 111;
    VALUE_112 = 112;
    VALUE_113 = 113;
    VALUE_114 = 114;
    VALUE_115 = 115;
    VALUE_116 = 116;
    VALUE_117 = 117;
    VALUE_118 = 118;
    VALUE_119 = 119;
    VALUE_120 = 120;
    VALUE_121 = 121;
    VALUE_122 = 122;
    VALUE_123 = 123;
    VALUE_124 = 124;
    VALUE_125 = 125;
    VALUE_126 = 126;
    VALUE_127 = 127;
    VALUE_128 = 128;
    VALUE_129 = 129;
    VALUE_130 = 130;
    VALUE_131 = 131;
    VALUE_132 = 132;
    VALUE_133 = 133;
    VALUE_134 = 134;
    VALUE_135 = 135;
    VALUE_136 = 136;
    VALUE_137 = 137;
    VALUE_138 = 138;
    VALUE_139 = 139;
    VALUE_140 = 140;
    VALUE_141 = 141;
    VALUE_142 = 142;
    VALUE_143 = 143;
    VALUE_144 = 144;
    VALUE_145 = 145;
    VALUE_146 = 146;
    VALUE_147 = 147;
    VALUE_148 = 148;
    VALUE_149 = 149;
    VALUE_150 = 150;
    VALUE_151 = 151;
    VALUE_152 = 152;
    VALUE_153 = 153;
    VALUE_154 = 154;
    VALUE_155 = 155;
    VALUE_156 = 156;
    VALUE_157 = 157;
    VALUE_158 = 158;
    VALUE_159 = 159;
    VALUE_160 = 160;
    VALUE_161 = 161;
    VALUE_162 = 162;
    VALUE_163 = 163;
    VALUE_164 = 164;
    VALUE_165 = 165;
    VALUE_166 = 166;
    VALUE_167 = 167;
    VALUE_168 = 168;
    VALUE_169 = 169;
    VALUE_170 = 170;
    VALUE_171 = 171;
    VALUE_172 = 172;
    VALUE_173 = 173;
    VALUE_174 = 174;
    VALUE_175 = 175;
    VALUE_176 = 176;
    VALUE_177 = 177;
    VALUE_178 = 178;
    VALUE_179 = 179;
    VALUE_180 = 180;
    VALUE_181 = 181;
    VALUE_182 = 182;
    VALUE_183 = 183;
    VALUE_184 = 184;
    VALUE_185 = 185;
    VALUE_186 = 186;
    VALUE_187 = 187;
    VALUE_188 = 188;
    VALUE_189 = 189;
    VALUE_190 = 190;
    VALUE_191 = 191;
    VALUE_192 = 192;
    VALUE_193 = 193;
    VALUE_194 = 194;
    VALUE_195 = 195;
    VALUE_196 = 196;
    VALUE_197 = 197;
    VALUE_198 = 198;
    VALUE_199 = 199;
    VALUE_200 = 200;
    VALUE_201 = 201;
    VALUE_202 = 202;
    VALUE_203 = 203;
    VALUE_204 = 204;
    VALUE_205 = 205;
    VALUE_206 = 206;
    VALUE_207 = 207;
    VALUE_208 = 208;
    VALUE_209 = 209;
    VALUE_210 = 210;
    VALUE_211 = 211;
    VALUE_212 = 212;
    VALUE_213 = 213;
    VALUE_214 = 214;
    VALUE_215 = 215;
    VALUE_216 = 216;
    VALUE_217 = 217;
    VALUE_218 = 218;
    VALUE_219 = 219;
    VALUE_220 = 220;
    VALUE_221 = 221;
    VALUE_222 = 2222;
    VALUE_223 = 223;
    VALUE_224 = 224;
    VALUE_225 = 225;
    VALUE_226 = 226;
    VALUE_227 = 227;
    VALUE_228 = 228;
    VALUE_229 = 229;
    VALUE_230 = 230;
    VALUE_231 = 231;
    VALUE_232 = 232;
    VALUE_233 = 233;
    VALUE_234 = 234;
    VALUE_235 = 235;
    VALUE_236 = 236;
    VALUE_237 = 237;
    VALUE_238 = 238;
    VALUE_239 = 239;
    VALUE_240 = 240;
    VALUE_241 = 241;
    VALUE_242 = 242;
    VALUE_243 = 243;
    VALUE_244 = 244;
    VALUE_245 = 245;
    VALUE_246 = 246;
    VALUE_247 = 247;
    VALUE_248 = 248;
    VALUE_249 = 249;
    VALUE_250 = 250;
    VALUE_251 = 251;
    VALUE_252 = 252;
    VALUE_253 = 253;
    VALUE_254 = 254;
    VALUE_255 = 255;
    VALUE_256 = 256;
}
