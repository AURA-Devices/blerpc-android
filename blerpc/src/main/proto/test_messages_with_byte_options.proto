syntax = "proto3";

option java_multiple_files = true;
option optimize_for = CODE_SIZE;
option java_generic_services = true;

package com.blerpc.device.test.proto;

import "blerpc.proto";

message TestOptionsImage {
    option (com.blerpc.message_size) = {
        message_size_bytes: 28
    };

    int32 version = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 1
    }];
    int32 crc = 2 [(com.blerpc.filed_bytes) = {
        from_byte: 1
        to_byte: 3
    }];
    int32 length = 3 [(com.blerpc.filed_bytes) = {
        from_byte: 3
        to_byte: 7
    }];
    bool release = 4 [(com.blerpc.filed_bytes) = {
        from_byte: 7
        to_byte: 8
    }];
    TestType type = 5 [(com.blerpc.filed_bytes) = {
        from_byte: 8
        to_byte: 9
    }];

    TestMetadata metadata = 6 [(com.blerpc.filed_bytes) = {
        from_byte: 10
        to_byte: 20
    }];
    int64 buildTime = 7 [(com.blerpc.filed_bytes) = {
        from_byte: 20
        to_byte: 28
    }];
}

message TestOptionsInteger {
    option (com.blerpc.message_size) = {
        message_size_bytes: 4
    };

    int32 value = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 4
    }];
}

message TestOptionsLong {
    option (com.blerpc.message_size) = {
        message_size_bytes: 8
    };

    int64 value = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 8
    }];
}

message TestOptionsBool {
    option (com.blerpc.message_size) = {
        message_size_bytes: 1
    };

    bool value = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 1
    }];
}

message TestOptionsEnum {
    option (com.blerpc.message_size) = {
        message_size_bytes: 1
    };

    TestType type = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 1
    }];
}

message TestOptionsMessage {
    option (com.blerpc.message_size) = {
        message_size_bytes: 4
    };

    TestOptionsInteger valueMessage = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 4
    }];
}

message TestOptionsImageRequest {}

message TestOptionsZeroBytesRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 0
    };
    int32 value = 1;
}

enum TestType {
    UNKNOWN = 0;
    ONLY_APP = 1;
    FULL = 2;
}

message TestMetadata {
    option (com.blerpc.message_size) = {
        message_size_bytes: 10
    };

    int32 ble_metadata = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 4
    }];

    TestToken token = 2 [(com.blerpc.filed_bytes) = {
        from_byte: 5
        to_byte: 9
    }];
}

message TestToken {
    option (com.blerpc.message_size) = {
        message_size_bytes: 4
    };

    int32 token = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 4
    }];
}

message TestOptionsWithFieldNoBytesRequest {
    int32 value = 1;
}

message TestOptionsNoBytesRangeRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 2
    };
    int32 value = 1;
}

message TestOptionsEqualsIndexesRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 10
    };

    int32 metadata = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 0
    }];
}

message TestOptionsNegativeRangeRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 10
    };

    int32 metadata = 1 [(com.blerpc.filed_bytes) = {
        from_byte: -1
        to_byte: 0
    }];
}

message TestOptionsRangeBiggerThanCountRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 10
    };

    int32 metadata = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 7
        to_byte: 11
    }];
}

message TestOptionsRangeIntersectRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 10
    };

    int32 value = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 4
    }];

    int32 metadata = 2 [(com.blerpc.filed_bytes) = {
        from_byte: 2
        to_byte: 6
    }];
}

message TestOptionsStringValueRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 4
    };

    string message = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 4
    }];
}

message TestOptionsFloatValueRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 4
    };

    float weight = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 4
    }];
}

message TestOptionsDoubleValueRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 4
    };

    double impedance = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 4
    }];
}

message TestOptionsWrongIntegerRangeRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 11
    };

    int32 value = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 11
    }];
}

message TestOptionsWrongLongRangeRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 13
    };

    int64 value = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 13
    }];
}

message TestOptionsWrongEnumRangeRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 9
    };

    TestType type = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 9
    }];
}

message TestOptionsWrongBooleanRangeRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 2
    };

    bool release = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 2
    }];
}

message TestOptionsSmallTwoBytesEnumRangeRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 1
    };

    TestTwoBytesSizeEnum big_enum = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 1
    }];
}

message TestOptionsSmallThreeBytesEnumRangeRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 2
    };

    TestThreeBytesSizeEnum big_enum = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 2
    }];
}

message TestOptionsSmallFourBytesEnumRangeRequest {
    option (com.blerpc.message_size) = {
        message_size_bytes: 3
    };

    TestFourBytesSizeEnum big_enum = 1 [(com.blerpc.filed_bytes) = {
        from_byte: 0
        to_byte: 3
    }];
}

enum TestTwoBytesSizeEnum {
    UNKNOWN_TWO_BYTES_ENUM_VALUE = 0;
    TWO_BYTES_ENUM_VALUE_1 = 1;
    TWO_BYTES_ENUM_VALUE_2 = 221;
    TWO_BYTES_ENUM_VALUE_3 = 2222;
    TWO_BYTES_ENUM_VALUE_4 = 223;
}

enum TestThreeBytesSizeEnum {
    UNKNOWN_THREE_BYTES_ENUM_VALUE = 0;
    THREE_BYTES_ENUM_VALUE_1 = 1;
    THREE_BYTES_ENUM_VALUE_2 = 221;
    THREE_BYTES_ENUM_VALUE_3 = 222222;
}

enum TestFourBytesSizeEnum {
    UNKNOWN_FOUR_BYTES_ENUM_VALUE = 0;
    FOUR_BYTES_ENUM_VALUE_1 = 1;
    FOUR_BYTES_ENUM_VALUE_2 = 221;
    FOUR_BYTES_ENUM_VALUE_3 = 222222222;
}
