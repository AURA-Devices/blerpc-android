syntax = "proto3";

option java_multiple_files = true;
option optimize_for = CODE_SIZE;
option java_generic_services = true;

package com.blerpc.device.test.proto;

import "blerpc.proto";

message TestIntegerMessage {
    option (com.blerpc.size) = {
        size_bytes: 4
    };

    int32 int_value = 1 [(com.blerpc.range) = {
        from_byte: 0
        to_byte: 4
    }];
}

message TestLongMessage {
    option (com.blerpc.size) = {
        size_bytes: 8
    };

    int64 long_value = 1 [(com.blerpc.range) = {
        from_byte: 0
        to_byte: 8
    }];
}

message TestBoolMessage {
    option (com.blerpc.size) = {
        size_bytes: 1
    };

    bool bool_value = 1 [(com.blerpc.range) = {
        from_byte: 0
        to_byte: 1
    }];
}

message TestEnumMessage {
    option (com.blerpc.size) = {
        size_bytes: 2
    };

    TestEnum enum_value = 1 [(com.blerpc.range) = {
        from_byte: 0
        to_byte: 2
    }];
}

message TestEmbeddedMessage {
    option (com.blerpc.size) = {
        size_bytes: 8
    };

    int32 int_value = 1 [(com.blerpc.range) = {
        from_byte: 0
        to_byte: 4
    }];

    TestIntegerMessage embedded_message = 2 [(com.blerpc.range) = {
        from_byte: 4
        to_byte: 8
    }];
}

message TestSkippedBytesMessage {
    option (com.blerpc.size) = {
        size_bytes: 10
    };

    int32 int_value_1 = 1 [(com.blerpc.range) = {
        from_byte: 0
        to_byte: 4
    }];

    int32 int_value_2 = 2 [(com.blerpc.range) = {
        from_byte: 6
        to_byte: 10
    }];
}

message TestEmptyMessage {}

message TestZeroBytesMessage {
    option (com.blerpc.size) = {
        size_bytes: 0
    };
    int32 int_value = 1;
}

enum TestEnum {
    UNKNOWN_VALUE = 0;
    VALUE_1 = 1;
    VALUE_2 = 2;
}

message TestNoBytesSizeMessage {
    int32 int_value = 1;
}

message TestNoBytesRangeMessage {
    option (com.blerpc.size) = {
        size_bytes: 2
    };
    int32 int_value = 1;
}

message TestZeroSizeRangeMessage {
    option (com.blerpc.size) = {
        size_bytes: 10
    };

    int32 int_value = 1 [(com.blerpc.range) = {
        from_byte: 0
        to_byte: 0
    }];
}

message TestFromByteBiggerToByteMessage {
    option (com.blerpc.size) = {
        size_bytes: 10
    };

    int32 int_value = 1 [(com.blerpc.range) = {
        from_byte: 1
        to_byte: 0
    }];
}

message TestNegativeRangeMessage {
    option (com.blerpc.size) = {
        size_bytes: 10
    };

    int32 int_value = 1 [(com.blerpc.range) = {
        from_byte: -1
        to_byte: 0
    }];
}

message TestRangeBiggerThanCountMessage {
    option (com.blerpc.size) = {
        size_bytes: 10
    };

    int32 int_value = 1 [(com.blerpc.range) = {
        from_byte: 0
        to_byte: 11
    }];
}

message TestRangesIntersectMessage {
    option (com.blerpc.size) = {
        size_bytes: 10
    };

    int32 int_value_1 = 1 [(com.blerpc.range) = {
        from_byte: 0
        to_byte: 4
    }];

    int32 int_value_2 = 2 [(com.blerpc.range) = {
        from_byte: 2
        to_byte: 10
    }];
}

message TestStringValueMessage {
    option (com.blerpc.size) = {
        size_bytes: 4
    };

    string string_value = 1 [(com.blerpc.range) = {
        from_byte: 0
        to_byte: 4
    }];
}

message TestFloatValueMessage {
    option (com.blerpc.size) = {
        size_bytes: 4
    };

    float float_value = 1 [(com.blerpc.range) = {
        from_byte: 0
        to_byte: 4
    }];
}

message TestDoubleValueMessage {
    option (com.blerpc.size) = {
        size_bytes: 8
    };

    double double_value = 1 [(com.blerpc.range) = {
        from_byte: 0
        to_byte: 8
    }];
}

message TestWrongIntegerRangeMessage {
    option (com.blerpc.size) = {
        size_bytes: 5
    };

    int32 int_value = 1 [(com.blerpc.range) = {
        from_byte: 0
        to_byte: 5
    }];
}

message TestWrongLongRangeMessage {
    option (com.blerpc.size) = {
        size_bytes: 9
    };

    int64 long_value = 1 [(com.blerpc.range) = {
        from_byte: 0
        to_byte: 9
    }];
}

message TestWrongEnumRangeMessage {
    option (com.blerpc.size) = {
        size_bytes: 5
    };

    TestEnum enum_value = 1 [(com.blerpc.range) = {
        from_byte: 0
        to_byte: 5
    }];
}

message TestWrongBooleanRangeMessage {
    option (com.blerpc.size) = {
        size_bytes: 2
    };

    bool bool_value = 1 [(com.blerpc.range) = {
        from_byte: 0
        to_byte: 2
    }];
}

message TestSmallFourBytesEnumRangeMessage {
    option (com.blerpc.size) = {
        size_bytes: 3
    };

    TestFourBytesEnum enum_value = 1 [(com.blerpc.range) = {
        from_byte: 0
        to_byte: 3
    }];
}

enum TestFourBytesEnum {
    UNKNOWN_FOUR_BYTES_ENUM_VALUE = 0;
    FOUR_BYTES_ENUM_VALUE_3 = 222222222;
}
