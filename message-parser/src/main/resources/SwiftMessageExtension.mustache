import Foundation

extension {{swiftPackageName}}{{serviceName}} {

    /// Convert data to {{swiftPackageName}}{{serviceName}} proto object
    /// - parameter data: data which needs to be converted
    /// - returns: decoded proto object
    static func decode(data: Data) -> {{swiftPackageName}}{{serviceName}} {
        var proto = {{swiftPackageName}}{{serviceName}}()
{{#fields}}
    {{#isEnum}}
        proto.{{name}} = {{swiftPackageName}}{{protoType}}.init(rawValue: ProtoDecoder.decode(data: data, from: {{fromByte}}, to: {{toByte}}, type: "TYPE_INT32") as! Int)!
    {{/isEnum}}
    {{#isProtoObject}}
        proto.{{name}} = {{swiftPackageName}}{{protoType}}.decode(data: data.subdata(in: Range.init(NSRange.init(location: {{fromByte}}, length: {{toByte}} - {{fromByte}}))!))
    {{/isProtoObject}}
    {{#isPrimitiveType}}
        proto.{{name}} = ProtoDecoder.decode(data: data, from: {{fromByte}}, to: {{toByte}}, type: "{{type}}") as! {{type}}
    {{/isPrimitiveType}}
{{/fields}}
        return proto
    }

    /// Convert {{swiftPackageName}}{{serviceName}} proto object to raw data
    /// - parameter proto: proto object which needs to be converted
    /// - returns: encoded data
    static func encode(proto: {{swiftPackageName}}{{serviceName}}) -> Data {
        var data = Data()
{{#fields}}
    {{#isEnum}}
        data.append(ProtoEncoder.encode(object: proto.{{name}}.rawValue, from: {{fromByte}}, to: {{toByte}}, type: "{{type}}"))
    {{/isEnum}}
    {{#isProtoObject}}
        data.append({{swiftPackageName}}{{protoType}}.encode(proto: proto.{{name}}))
    {{/isProtoObject}}
    {{#isPrimitiveType}}
        data.append(ProtoEncoder.encode(object: proto.{{name}}, from: {{fromByte}}, to: {{toByte}}, type: "{{type}}"))
    {{/isPrimitiveType}}
{{/fields}}
        return data
    }

}
