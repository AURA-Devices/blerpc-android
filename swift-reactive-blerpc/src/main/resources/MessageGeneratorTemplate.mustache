import Foundation

extension {{swiftPackageName}}{{serviceName}} {

    /// Convert data to {{swiftPackageName}}{{serviceName}} proto object
    /// - parameter data: data which needs to be converted
    /// - returns: decoded proto object
    static func decode(data: Data) throws -> {{swiftPackageName}}{{serviceName}} {
        do {
            var proto = {{swiftPackageName}}{{serviceName}}()
{{#fields}}
    {{#isEnum}}
            proto.{{name}} = try {{swiftPackageName}}{{protoType}}.init(rawValue: ProtoDecoder.decode(data: data, from: {{fromByte}}, to: {{toByte}}, type: ProtoType.init(rawValue: "TYPE_INT32")) as! Int)!
    {{/isEnum}}
    {{#isProtoObject}}
            proto.{{name}} = try {{swiftPackageName}}{{protoType}}.decode(data: data.subdata(in: Range.init(NSRange.init(location: {{fromByte}}, length: {{toByte}} - {{fromByte}}))!))
    {{/isProtoObject}}
    {{#isPrimitiveType}}
            proto.{{name}} = try ProtoDecoder.decode(data: data, from: {{fromByte}}, to: {{toByte}}, type: ProtoType.init(rawValue: "{{type}}")) as! {{type}}
    {{/isPrimitiveType}}
{{/fields}}
            return proto
        } catch {
            throw error
        }
    }

    /// Convert {{swiftPackageName}}{{serviceName}} proto object to raw data
    /// - parameter proto: proto object which needs to be converted
    /// - returns: encoded data
    static func encode(proto: {{swiftPackageName}}{{serviceName}}) throws -> Data {
        do {
            var data = Data()
{{#fields}}
    {{#isEnum}}
            data.append(try ProtoEncoder.encode(object: proto.{{name}}.rawValue, from: {{fromByte}}, to: {{toByte}}, type: ProtoType.init(rawValue: "{{type}}")))
    {{/isEnum}}
    {{#isProtoObject}}
            data.append(try {{swiftPackageName}}{{protoType}}.encode(proto: proto.{{name}}))
    {{/isProtoObject}}
    {{#isPrimitiveType}}
            data.append(try ProtoEncoder.encode(object: proto.{{name}}, from: {{fromByte}}, to: {{toByte}}, type: ProtoType.init(rawValue: "{{type}}")))
    {{/isPrimitiveType}}
{{/fields}}
return data
        } catch {
            throw error
        }
    }

}
