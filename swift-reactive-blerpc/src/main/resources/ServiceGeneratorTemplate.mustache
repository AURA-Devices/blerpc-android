import CoreBluetooth
import Foundation
import RxBluetoothKit
import RxSwift

/// {{serviceName}} service.
public class {{serviceName}}: BleRpcService {
    /// UUID of service.
    public static let {{serviceName}}UUID: String = "{{serviceUUID}}"
{{#methods}}
    {{#typeRead}}

    /// Send read request of method {{methodName}} on device.
    /// - parameter request: {{inputType}}.
    /// - returns: *Single* to operation with {{outputType}}.
    public func {{methodName}}(request: {{inputType}}) -> Single<{{outputType}}> {
        do {
            let data = try {{inputType}}.bleRpcEncode(proto: request)

            return bleWorker.read(
                request: data,
                serviceUUID: {{serviceName}}.{{serviceName}}UUID,
                characteristicUUID: "{{characteristicUUID}}")
            .map { response in
                try {{outputType}}.bleRpcDecode(data: response)
            }
        } catch {
            return Single.error(BluetoothError.destroyed)
        }
    }
    {{/typeRead}}
    {{#typeWrite}}

    /// Send write request of method {{methodName}} on device.
    /// - parameter request: {{inputType}}.
    /// - returns: *Single* to operation with {{outputType}}.
    public func {{methodName}}(request: {{inputType}}) -> Single<{{outputType}}> {
        do {
            let data = try {{inputType}}.bleRpcEncode(proto: request)

            return bleWorker.write(
                request: data,
                serviceUUID: {{serviceName}}.{{serviceName}}UUID,
                characteristicUUID: "{{characteristicUUID}}")
            .map { response in
                try {{outputType}}.bleRpcDecode(data: response)
            }
        } catch {
            return Single.error(BluetoothError.destroyed)
        }
    }
    {{/typeWrite}}
    {{#typeSubscribe}}

    /// Send subscribe request of method {{methodName}} on device.
    /// - parameter request: {{inputType}}.
    /// - returns: *Observable* to operation.
    public func {{methodName}}(request: {{inputType}}) -> Observable<{{outputType}}> {
        do {
            let data = try {{inputType}}.bleRpcEncode(proto: request)

            return bleWorker.subscribe(
                request: data,
                serviceUUID: {{serviceName}}.{{serviceName}}UUID,
                characteristicUUID: "{{characteristicUUID}}")
            .map { response in
                try {{outputType}}.bleRpcDecode(data: response)
            }
        } catch {
            return Observable.error(error)
        }
    }
    {{/typeSubscribe}}
{{/methods}}
}
