import Foundation
import RxBluetoothKit
import CoreBluetooth
import RxSwift
import PromiseKit

/// {{serviceName}} service
public class {{serviceName}}: BleAbstractService {

    /// UUID of service
    public static let {{serviceName}}UUID: String = "{{serviceUUID}}"

{{#methods}}
    {{#typeRead}}
    /// Send read request of method {{methodName}} on device
    /// - parameter request: {{inputType}}
    /// - returns: {{outputType}} if success
    /// - warning: rejects when there is error in sending data
    public func {{methodName}}(request: {{inputType}}) -> Promise<{{outputType}}> {
        return Promise { seal in
            _ = self.bleWorker.discoverCharacteristic(serviceUUID: "{{serviceUUID}}", characteristicUUID: "{{characteristicUUID}}").map { characteristic in
                _ = characteristic.readValue().subscribe(onSuccess: { (characteristic) in
                    guard let data = characteristic.value else {
                        let wrongDataError = NSError(domain: "ble-module.errors", code: 0, userInfo:
                                            [NSLocalizedDescriptionKey: "Device returned empty response"])
                        seal.reject(wrongDataError)
                        return
                    }

                    do {
                        let proto = try {{outputType}}.decode(data: data)
                        seal.fulfill(proto)
                    } catch {
                        seal.reject(error)
                    }
                }, onError: { (error) in
                    seal.reject(error)
                })
            }
        }
    }
    {{/typeRead}}

    {{#typeWrite}}
    /// Send write request of method {{methodName}} on device
    /// - parameter request: {{inputType}}
    /// - returns: {{outputType}} if success
    /// - warning: rejects when there is error in sending data
    public func {{methodName}}(request: {{inputType}}) -> Promise<{{outputType}}> {
        return Promise { seal in
            do {
                let data = try {{inputType}}.encode(proto: request)
                _ = self.bleWorker.discoverCharacteristic(serviceUUID: "{{serviceUUID}}", characteristicUUID: "{{characteristicUUID}}").map { characteristic in
                    _ = characteristic.writeValue(data, type: .withResponse).subscribe { event in
                        switch event {
                        case .success:
                            guard let data = characteristic.value else {
                                let wrongDataError = NSError(domain: "ble-module.errors", code: 0, userInfo:
                                                    [NSLocalizedDescriptionKey: "Device returned empty response"])
                                seal.reject(wrongDataError)
                                return
                            }

                            do {
                                let proto = try {{outputType}}.decode(data: data)
                                seal.fulfill(proto)
                            } catch {
                                seal.reject(error)
                            }
                        case .error(let error):
                            seal.reject(error)
                        }
                    }
                }
            } catch {
                seal.reject(error)
            }
        }
    }
    {{/typeWrite}}

    {{#typeSubscribe}}
    /// Send subscribe request of method {{methodName}} on device
    /// - parameter request: {{inputType}}
    /// - parameter completion: closure which calls when new data appears
    /// - parameter onError: closure which calls when error occurs
    /// - returns: handler with with we can identify operation
    public func {{methodName}}(request: {{inputType}}, completion: @escaping ({{outputType}}) -> Void,
                                 onError: @escaping (Error) -> Void) -> BleOperationHandler {
        let handler = BleOperationHandler.init(id: self.bleWorker.generateId(), service: self, selector: Selector(("unsubscribe{{upperCasedMethodName}}:")))

        _ = self.bleWorker.discoverCharacteristic(serviceUUID: "{{serviceUUID}}", characteristicUUID: "{{characteristicUUID}}").map { [weak self] characteristic in
            let disposable = characteristic.observeValueUpdateAndSetNotification().subscribe({ (event) in
                switch event {
                case .completed:
                    break
                case .error(let error):
                    onError(error)
                case .next(let characteristic):
                    guard let data = characteristic.value else {
                        let wrongDataError = NSError(domain: "ble-module.errors", code: 0, userInfo:
                                            [NSLocalizedDescriptionKey: "Device returned empty response"])
                        onError(wrongDataError)
                        return
                    }

                    do {
                        let proto = try {{outputType}}.decode(data: data)
                        completion(proto)
                    } catch {
                        onError(error)
                    }
                }
            })
                        
            let disposableId = BleOperationIdentifier.init(serviceUUID: UUID.init(uuidString: "{{serviceUUID}}")!,
                                                    characteristicUUID: UUID.init(uuidString: "{{characteristicUUID}}")!,
                                                                    id: handler.id)
            self?.bleWorker.disposableBag[disposableId] = disposable
        }

        return handler
    }

    /// Unsubscribe from receiving {{methodName}} updates
    /// - parameter obj: handler which needs to be unsubscribed
    @objc private func unsubscribe{{upperCasedMethodName}}(_ obj: Any) {
        let handler = obj as! BleOperationHandler
        let operation = BleOperationIdentifier.init(serviceUUID: UUID.init(uuidString: "{{serviceUUID}}")!,
                                                characteristicUUID: UUID.init(uuidString: "{{characteristicUUID}}")!,
                                                                id: handler.id)
        self.bleWorker.disconnect(from: operation)
    }
    {{/typeSubscribe}}

{{/methods}}
}
