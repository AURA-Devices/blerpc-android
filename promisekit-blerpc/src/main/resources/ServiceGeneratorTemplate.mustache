import Foundation
import RxBluetoothKit
import CoreBluetooth
import RxSwift

/// {{serviceName}} service
public class {{serviceName}}: BleAbstractService {

    /// UUID of service
    public static let {{serviceName}}UUID: String = "{{serviceUUID}}"

{{#methods}}
    {{#typeRead}}
    /// Send read request of method {{methodName}} on device
    /// - parameter request: {{inputType}}
    /// - returns: *Observable* to operation with {{outputType}}
    public func {{methodName}}(request: {{inputType}}) -> Observable<{{outputType}}> {
        return Observable.create { [weak self] observer in
            var disposable: Disposable?
            
            do {
                let data = try {{inputType}}.encode(proto: request)
                
                disposable = self?.bleWorker.read(request: data, serviceUUID: "{{serviceUUID}}", characteristicUUID: "{{characteristicUUID}}")
                .subscribe(onNext: { (response) in
                    do {
                        let proto = try {{outputType}}.decode(data: response)
                        observer.onNext(proto)
                    } catch {
                        observer.onError(error)
                    }
                }, onError: { (error) in
                    observer.onError(error)
                }, onCompleted: {
                    observer.onCompleted()
                })
            } catch {
                observer.onError(error)
            }
            
            return Disposables.create {
                disposable?.dispose()
            }
        }
    }
    {{/typeRead}}

    {{#typeWrite}}
    /// Send write request of method {{methodName}} on device
    /// - parameter request: {{inputType}}
    /// - returns: *Observable* to operation with {{outputType}}
    public func {{methodName}}(request: {{inputType}}) -> Observable<{{outputType}}> {
        return Observable.create { [weak self] observer in
            var disposable: Disposable?
            
            do {
                let data = try {{inputType}}.encode(proto: request)
                
                disposable = self?.bleWorker.write(request: data, serviceUUID: "{{serviceUUID}}", characteristicUUID: "{{characteristicUUID}}")
                .subscribe(onNext: { (response) in
                    do {
                        let proto = try {{outputType}}.decode(data: response)
                        observer.onNext(proto)
                    } catch {
                        observer.onError(error)
                    }
                }, onError: { (error) in
                    observer.onError(error)
                }, onCompleted: {
                    observer.onCompleted()
                })
            } catch {
                observer.onError(error)
            }
            
            return Disposables.create {
                disposable?.dispose()
            }
        }
    }
    {{/typeWrite}}

    {{#typeSubscribe}}
    /// Send subscribe request of method {{methodName}} on device
    /// - parameter request: {{inputType}}
    /// - returns: *Observable* to operation
    public func {{methodName}}(request: {{inputType}}) -> Observable<{{outputType}}> {
        return Observable.create { [weak self] observer in
            var disposable: Disposable?
            
            do {
                let data = try {{inputType}}.encode(proto: request)
                
                disposable = self?.bleWorker.subscribe(request: data, serviceUUID: "{{serviceUUID}}", characteristicUUID: "{{characteristicUUID}}")
                .subscribe(onNext: { (response) in
                    do {
                        let proto = try {{outputType}}.decode(data: response)
                        observer.onNext(proto)
                    } catch {
                        observer.onError(error)
                    }
                }, onError: { (error) in
                    observer.onError(error)
                }, onCompleted: {
                    observer.onCompleted()
                })
            } catch {
                observer.onError(error)
            }
            
            return Disposables.create {
                disposable?.dispose()
            }
        }
    }
    {{/typeSubscribe}}

{{/methods}}
}
